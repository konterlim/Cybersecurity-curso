Técnicas de concentração de segurança

Lista de seções expansíveis. Selecione cada botão para expandir o conteúdo.
Ao codificar aplicativos, os desenvolvedores usam várias técnicas para validar se todos os requisitos de segurança foram atendidos.

A normalização é usada para organizar dados em um banco de dados e ajudar a manter a integridade dos dados. A normalização converte uma sequência de entrada em sua forma mais simples conhecida para garantir que todas as sequências tenham representações binárias exclusivas e que qualquer entrada mal-intencionada seja identificada.

Um procedimento armazenado é um grupo de instruções SQL pré-compiladas armazenadas em um banco de dados que executa uma tarefa. Se você usar um procedimento armazenado para aceitar parâmetros de entrada de clientes que usam dados de entrada diferentes, reduzirá o tráfego de rede e obterá resultados mais rápidos.

Um desenvolvedor pode usar a ofuscação e a camuflagem para impedir que o software seja reprojetado. A ofuscação oculta dados originais com caracteres ou dados aleatórios. A camuflagem substitui os dados alcançados por dados fictícios realistas.

A reutilização de código significa usar o software atual para criar um novo software, economizando tempo e custos de desenvolvimento. É preciso ter cuidado, no entanto, para evitar a introdução de vulnerabilidades.

Kits de desenvolvimento de software e bibliotecas de terceiros (SDKs) fornecem um repositório de códigos úteis para tornar o desenvolvimento de aplicativos mais rápido e mais barato. A restrição é que qualquer vulnerabilidade em SDKs ou bibliotecas de terceiros pode afetar muitos aplicativos.

Validação de entrada
Controlar o processo de entrada de dados é fundamental para manter a integridade do banco de dados. Muitos ataques são executados em um banco de dados e inserem dados malformados. O ataque pode confundir, falhar ou fazer com que o aplicativo divulgue informações demais para o invasor. Role para baixo para ver um exemplo - neste caso, um ataque de entrada automatizado.

Por exemplo, os usuários preenchem um formulário usando um aplicativo da Web para assinar uma newsletter. Um aplicativo de banco de dados gera e envia automaticamente confirmações por e-mail para os clientes. Quando os usuários recebem as confirmações de e-mail com um URL de link, para confirmar uma assinatura, os invasores modificam o URL do link. 

Essas modificações podem alterar o nome de usuário, o endereço de e-mail ou o status da assinatura dos clientes quando eles clicam para confirmar a assinatura. Dessa forma, quando o e-mail é retornado para o host do servidor, ele recebe informações falsas, que podem não estar cientes se não verificar cada endereço de e-mail em relação às informações de assinatura.

Os hackers podem automatizar o ataque para inundar o aplicativo da Web com milhares de assinantes inválidos no banco de dados da newsletter.

 

 


Incompleta 2.2.6 Regras de Validação2.2.6 Regras de Validação
Uma regra de validação verifica se os dados estão nos parâmetros definidos pelo projetista de banco de dados. Uma regra de validação ajuda a garantir a integridade, a precisão e a consistência dos dados. Os critérios usados ​​na regra de validação incluem o seguinte:

Tamanho – verifica o número de caracteres em um item de dados
Formato – verifique se os dados estão de acordo com um formato especificado
Consistência – verifica a compatibilidade dos códigos nos itens de dados relacionados
Intervalo – verifica se os dados estão dentro dos valores mínimo e máximo
Dígito de verificação – processar um dado extra para gerar um dígito de verificação para detecção de erros

Dados comprometidos podem ameaçar a segurança de seus dispositivos e sistemas.

Uma verificação de integridade pode medir a consistência dos dados em um arquivo, imagem ou registro para garantir que eles não tenham sido corrompidos. A verificação de integridade executa um hash de função para obter um instantâneo de dados e, em seguida, usa esse instantâneo para garantir que os dados sejam inalterados. Um checksum é um exemplo de uma função hash.

Uma soma de verificação verifica a integridade de arquivos, ou de strings de caracteres, antes e depois de serem transferidos de um dispositivo para outro por uma rede local ou pela Internet. Como checksum, simplesmente converta cada conjunto de informações para um valor e soma o total. Para testar a integridade dos dados, um sistema de recebimento apenas repete o processo. Se as duas somas forem iguais, os dados são válidos. Caso contrário, uma alteração ocorreu em algum lugar ao longo do caminho.

Funções hash comuns incluem MD5, SHA-1, SHA-256 e SHA-512. Eles usam algoritmos matemáticos complexos para comparar dados com um valor de hash. Por exemplo, depois de baixar um arquivo, o usuário pode verificar a integridade do arquivo, comparando os valores de hash da fonte com o valor gerado por qualquer calculadora de hash.

As empresas usam o controle de versão para evitar alterações acidentais por usuários autorizados. O controle de versão significa que dois usuários não podem atualizar o mesmo objeto, como um arquivo, registro de banco de dados ou transação, ao mesmo tempo. Por exemplo, o primeiro usuário a abrir um documento tem a permissão para alterar esse documento. A segunda pessoa tem uma versão somente leitura.

Backups precisos ajudam a manter a integridade dos dados, se os dados forem corrompidos. Uma empresa precisa verificar o seu processo para garantir a integridade do backup, antes que cause perda de dados.

A autorização determina quem tem acesso aos recursos da empresa, de acordo com a necessidade de cada um. Por exemplo, controles de acesso de usuário e permissões de arquivo garantem que apenas certos usuários possam modificar os dados. Um administrador pode definir as permissões de um arquivo como somente leitura. Como resultado, um usuário que acessa esse arquivo não pode fazer nenhuma alteração.

